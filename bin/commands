#!/bin/bash

install_yaourt(){
	cd /tmp
	curl https://aur.archlinux.org/cgit/aur.git/snapshot/package-query.tar.gz -0 | tar -zx
	cd package-query
	makepkg -s --noconfirm
	sudo pacman -U package-query-*.pkg.tar.xz --noconfirm
	cd /tmp
	rm -rf /tmp/package-query
	curl https://aur.archlinux.org/cgit/aur.git/snapshot/yaourt.tar.gz -0 | tar -zx
	cd yaourt
	makepkg -s --noconfirm
	sudo pacman -U yaourt-*.pkg.tar.xz --noconfirm
	cd
	rm -rf /tmp/yaourt
}

update_mirrorlist(){
	sudo reflector --verbose -l 5 --sort rate --save /etc/pacman.d/mirrorlist
}

pacman_remove_orphan(){
	sudo pacman -Rns $(pacman -Qtdq)
}

git_sync(){
	g fetch --all -p --quiet
	g co --quiet --detach
	g fetch --quiet origin $1:$1
	g co --quiet -
}

#
# monitor stuff
#

1_monitor(){
	# disable all other monitors, just laptop now
	xrandr \
		--output eDP1 --mode 2560x1600 --pos 0x0 --rotate normal \
		--output HDMI2 --off \
		--output VIRTUAL1 --off \
		--output DP1 --off \
		--output HDMI1 --off \
		--output DP2 --off
}

portable_monitor(){
	xrandr \
 		--output HDMI2 --primary --mode 1920x1080 --pos 0x0 --rotate normal \
		--output eDP1 --off \
		--output VIRTUAL1 --off \
		--output DP1 --off \
		--output HDMI1 --off \
		--output DP2 --off
}

2_monitor(){
	# when going to 2 monitors remove the scale so xranr can work
	unscale_monitor

	# enable all 2 monitors
	xrandr \
		--output HDMI2 --mode 1920x1080 --pos 0x0 --rotate normal \
		--output eDP1 --primary --mode 2560x1600 --pos 112x1080 --rotate normal \
		--output HDMI1 --off \
		--output DP1 --off \
		--output DP2 --off


	# scale laptop monitor back 65% because macbook monitor resolution is tiny
	scale_monitor
}

scale_monitor(){
	xrandr --output eDP1 --scale 0.65x0.65
}

unscale_monitor(){
	xrandr --output eDP1 --scale 1x1
}

gb_keyboard(){
	setxkbmap -layout gb
	localectl set-keymap --no-convert gb
}

br_keyboard(){
	setxkbmap -layout br
	localectl set-keymap --no-convert br
}

us_keyboard(){
	setxkbmap -layout us
	localectl set-keymap --no-convert us
}

prev() {
  PREV=$(fc -lrn | head -n 1)
  sh -c "pet new `printf %q "$PREV"`"
}

pet-select() {
  BUFFER=$(pet search --query "$READLINE_LINE")
  READLINE_LINE=$BUFFER
  READLINE_POINT=${#BUFFER}
}
bind -x '"\C-y": pet-select'
#bind -x '"\C-r": __fzf_history__'

milli_to_date(){

	for var in "$@"
	do
    		echo "$var"
		printf '\t' ; TZ=UTC date -d @$(  echo "($var + 500) / 1000" | bc)
		printf '\t' ; TZ=Europe/London date -d @$(  echo "($var + 500) / 1000" | bc)
	done
}

snapshot_version(){
	printf "0.%s-SNAPSHOT" $(git rev-parse --short HEAD)
}

snapshot_image(){
	printf "0.%s" $(git rev-parse HEAD)
}

ci_and_push(){
	message=("$*")
	printf "Enter to confirm message (ctrl-c to cancel): '$message' "
	read confirm

	git commit -m "$message"
	if [ $? -eq 0 ];then
		git push origin
	else
		printf "Commit failed\n"
	fi
}

keyboard_bluetooth(){
	echo -e "connect 70:F0:87:29:75:8F\n" | bluetoothctl
}
